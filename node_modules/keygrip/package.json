{
  "_args": [
    [
      {
        "raw": "keygrip@git://github.com/crypto-utils/keygrip.git",
        "scope": null,
        "escapedName": "keygrip",
        "name": "keygrip",
        "rawSpec": "git://github.com/crypto-utils/keygrip.git",
        "spec": "git://github.com/crypto-utils/keygrip.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:crypto-utils/keygrip.git",
          "sshUrl": "git+ssh://git@github.com/crypto-utils/keygrip.git",
          "httpsUrl": "git+https://github.com/crypto-utils/keygrip.git",
          "gitUrl": "git://github.com/crypto-utils/keygrip.git",
          "shortcut": "github:crypto-utils/keygrip",
          "directUrl": "https://raw.githubusercontent.com/crypto-utils/keygrip/master/package.json"
        }
      },
      "C:\\Users\\tokos\\Desktop\\Proba\\node_modules\\.bin\\Ruhak\\node_modules\\node-cookie"
    ]
  ],
  "_from": "git://github.com/crypto-utils/keygrip.git",
  "_id": "keygrip@1.0.1",
  "_inCache": true,
  "_location": "/keygrip",
  "_phantomChildren": {},
  "_requested": {
    "raw": "keygrip@git://github.com/crypto-utils/keygrip.git",
    "scope": null,
    "escapedName": "keygrip",
    "name": "keygrip",
    "rawSpec": "git://github.com/crypto-utils/keygrip.git",
    "spec": "git://github.com/crypto-utils/keygrip.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:crypto-utils/keygrip.git",
      "sshUrl": "git+ssh://git@github.com/crypto-utils/keygrip.git",
      "httpsUrl": "git+https://github.com/crypto-utils/keygrip.git",
      "gitUrl": "git://github.com/crypto-utils/keygrip.git",
      "shortcut": "github:crypto-utils/keygrip",
      "directUrl": "https://raw.githubusercontent.com/crypto-utils/keygrip/master/package.json"
    }
  },
  "_requiredBy": [
    "/node-cookie"
  ],
  "_resolved": "git://github.com/crypto-utils/keygrip.git#f7b41c2f305cfa7030d7da9e64af9790aa3be93a",
  "_shasum": "c07f26343b27e82ce92a0e38387f015e895d2ca7",
  "_shrinkwrap": null,
  "_spec": "keygrip@git://github.com/crypto-utils/keygrip.git",
  "_where": "C:\\Users\\tokos\\Desktop\\Proba\\node_modules\\.bin\\Ruhak\\node_modules\\node-cookie",
  "bugs": {
    "url": "https://github.com/crypto-utils/keygrip/issues"
  },
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "Jed Schmidt",
      "email": "where@jed.is",
      "url": "http://jedschmidt.com"
    },
    {
      "name": "Jonathan Ong",
      "email": "me@jongleberry.com",
      "url": "http://jongleberry.com"
    }
  ],
  "dependencies": {
    "debug": "~2.1.3",
    "scmp": "1.0.0"
  },
  "description": "Key signing and verification for rotated credentials",
  "devDependencies": {
    "istanbul": "0.3.9",
    "mocha": "~2.2.4"
  },
  "engines": {
    "node": ">= 0.8"
  },
  "files": [
    "lib/",
    "History.md",
    "LICENSE",
    "README.md",
    "index.js"
  ],
  "gitHead": "f7b41c2f305cfa7030d7da9e64af9790aa3be93a",
  "homepage": "https://github.com/crypto-utils/keygrip#readme",
  "license": "MIT",
  "name": "keygrip",
  "optionalDependencies": {},
  "readme": "# keygrip\r\n\r\n[![NPM Version][npm-image]][npm-url]\r\n[![NPM Downloads][downloads-image]][downloads-url]\r\n[![Node.js Version][node-version-image]][node-version-url]\r\n[![Build Status][travis-image]][travis-url]\r\n[![Test Coverage][coveralls-image]][coveralls-url]\r\n\r\nKeygrip is a [node.js](http://nodejs.org/) module for signing and verifying data through a rotating credential system, in which new server keys can be added and old ones removed regularly, without invalidating client credentials.\r\n\r\n## Install\r\n\r\n    $ npm install keygrip\r\n\r\n## API\r\n\r\n### keys = Keygrip(keylist)\r\n\r\nThis creates a new Keygrip based on the provided `keylist`.\r\n\r\n```javascript\r\nvar Keygrip = require('keygrip')\r\nkeys = Keygrip([\"SEKRIT2\", \"SEKRIT1\"])\r\n```\r\n\r\nThe keylist is an array of all valid keys for signing, in descending order of freshness; new keys should be `unshift`ed into the array and old keys should be `pop`ped.\r\n\r\nThe tradeoff here is that adding more keys to the keylist allows for more granular freshness for key validation, at the cost of a more expensive worst-case scenario for old or invalid hashes.\r\n\r\nKeygrip keeps a reference to this array to automatically reflect any changes. This reference is stored using a closure to prevent external access.\r\n\r\nWhen using `Keygrip` to encrypt and decrypt data, each `key`'s length is important, as it should be at least the minimum key length for the cipher you are using, otherwise it'll be padded with NULs. The default cipher, AES 256, should be a 32 character string key, for example.\r\n\r\n### var buf = keys.sign(data)\r\n\r\nThis creates a HMAC based on the _first_ key in the keylist, and outputs it as a buffer.\r\n\r\nUses `.hash=` as the underlying algorithm.\r\n\r\n### var index = keys.indexOf(data)\r\n\r\nThis loops through all of the keys currently in the keylist until the digest of the current key matches the given digest, at which point the current index is returned. If no key is matched, `-1` is returned.\r\n\r\nThe idea is that if the index returned is greater than `0`, the data should be re-signed to prevent premature credential invalidation, and enable better performance for subsequent challenges.\r\n\r\n### var bool = keys.verify(data)\r\n\r\nThis uses `index` to return `true` if the digest matches any existing keys, and `false` otherwise.\r\n\r\n### var buf = keys.encrypt(message, [iv])\r\n\r\nCreates an encrypted message as a buffer based on the _first_ key in the keylist and optionally based on an initialization vector.\r\n\r\nUses `.cipher=` as the underlying algorithm.\r\nNote that `iv` length is important.\r\n\r\n### var [buf, i] = keys.decrypt(message, [iv])\r\n\r\nDecrypts a message, optionally with an initialization vector.\r\nReturns a buffer as `buf`.\r\nAlso returns `i`, the index of the `key` used.\r\nIf `i !== 0`, you may want to re-encrypt the message to use the latest key.\r\n\r\n### keys.hash=\r\n\r\nSet the hashing algorithm for signing, defaulting to `sha256`.\r\n\r\n### .cipher=\r\n\r\nSet the algorithm used for message encryption, defaulting to `aes-256-cbc`.\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\n[npm-image]: https://img.shields.io/npm/v/keygrip.svg\r\n[npm-url]: https://npmjs.org/package/keygrip\r\n[node-version-image]: https://img.shields.io/node/v/keygrip.svg\r\n[node-version-url]: http://nodejs.org/download/\r\n[travis-image]: https://img.shields.io/travis/crypto-utils/keygrip/master.svg\r\n[travis-url]: https://travis-ci.org/crypto-utils/keygrip\r\n[coveralls-image]: https://img.shields.io/coveralls/crypto-utils/keygrip/master.svg\r\n[coveralls-url]: https://coveralls.io/r/crypto-utils/keygrip?branch=master\r\n[downloads-image]: https://img.shields.io/npm/dm/keygrip.svg\r\n[downloads-url]: https://npmjs.org/package/keygrip\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/crypto-utils/keygrip.git"
  },
  "scripts": {
    "test": "mocha --reporter spec --bail --check-leaks test/",
    "test-ci": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"
  },
  "version": "1.0.1"
}
